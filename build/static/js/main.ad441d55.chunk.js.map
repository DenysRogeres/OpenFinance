{"version":3,"sources":["styles/global.ts","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","components/Summary/styles.ts","services/api.ts","hooks/useTransactions.tsx","assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/index.tsx","components/TransactionTable/styles.ts","components/TransactionTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","App.tsx","index.tsx"],"names":["GlobalStyled","createGlobalStyle","Container","styled","header","Content","div","Header","onOpenNewTransactionModal","src","logoImg","alt","type","onClick","api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Summary","summary","reduce","acc","amount","deposits","total","withdraws","incomeImg","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionTable","map","title","category","DateTimeFormat","id","main","Dashboard","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","activeColor","NewTransactionModal","isOpen","onRequestClose","setType","setTitle","setAmount","setCategory","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","App","Modal","setAppElement","isNewTransacationModalOpen","setNewTransactionModalOpen","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad441d55.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\n\nexport const GlobalStyled = createGlobalStyle`\n\n    :root {\n        --background: #F0F2F5;\n        --red: #e52e4d;\n        --blue: #5429cc;\n        --green: #33cc95;\n        --blue-light: #6933ff;\n\n        --text-title: #363f5f;\n        --text-body: #969cb3;\n\n        --shape: #ffff;\n    }\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n\n    html {\n        @media(max-width: 1080px) {\n            font-size: 93.75%\n        }\n        @media(max-width: 720px) {\n            font-size: 87.5%\n        }\n    }\n\n    body {\n        background: var(--background);\n        -webkit-font-smoothing: antialiased;\n    }\n\n    body, input, textarea, button {\n        font-family: 'Poppins', sans-serif;\n        font-weight: 400;\n    }\n\n    h1, h2, h3, h4, h5, h6, strong {\n        font-weight: 600;\n    }\n\n    button {\n        cursor: pointer;\n    }\n\n    [disabled] {\n        cursor: not-allowed;\n    }\n\n    .react-modal-overlay {\n        background: rgba(0, 0, 0, 0.5);\n        \n        display: flex;\n        align-items: center;\n        justify-content: center;\n        \n        position: fixed;\n        top: 0;\n        bottom: 0;\n        right: 0;\n        left: 0;\n    }\n    \n    .react-modal-content {\n        width: 100%;\n        max-width: 576px;\n        background: var(--background);\n        padding: 3rem;\n        position: relative;\n        border-radius: 0.25rem;\n    }\n\n    .react-modal-close {\n        cursor: pointer;\n        position: absolute;\n        right: 1.5rem;\n        top: 1.5rem;\n\n        transition: filter 0.2s;\n\n        &:hover {\n            filter: brightness(0.6);\n        }\n    }\n\n`","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import  styled  from 'styled-components'\n\nexport const Container = styled.header`\n    background: var(--blue);\n`;\n\nexport const Content = styled.div`\n    max-width: 1128px;\n    margin: 0 auto;\n\n    padding: 2rem 1rem 12rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    button {\n        border: 0;\n        font-size: 1rem;\n        color: #FFFF;\n        background-color: var(--blue-light);\n        padding: 0 2rem;\n        border-radius: 0.25rem;\n        height: 3rem;\n\n        transition: filter 0.2s;\n\n        &:hover {\n            filter: brightness(0.9);\n        }\n\n\n    }\n`","import logoImg from '../../assets/logo.svg';\nimport { Container, Content } from './styles';\n\ninterface HeaderProps {\n    onOpenNewTransactionModal: () => void;\n}\n\nexport function Header({onOpenNewTransactionModal}:HeaderProps) {\n    return(\n        <Container>\n            <Content>\n                <img src={logoImg} alt=\"Logo dt money\" />\n                <button type=\"button\" onClick={onOpenNewTransactionModal}>\n                    Nova transação\n                </button>\n            </Content>\n        </Container>\n    );\n}","import styled from 'styled-components';\n\n\nexport const Container = styled.div`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 2rem;\n    margin-top: -10rem;\n\n    div{\n        background: var(--shape);\n        padding: 1.5rem 2rem;\n        border-radius: 0.25rem;\n        color: var(--text-title);\n    }\n\n    header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    }\n\n    strong {\n        margin-top: 1rem;\n        font-size: 2rem;\n        font-weight: 500;\n        line-height: 3rem;\n        display: block;\n    }\n\n    & .highlight-background {\n        background: var(--green);\n        color: #FFFF;\n    }\n\n`","import axios from 'axios';\n\nexport const api = axios.create({\n    baseURL: 'http://localhost:3000/api'\n});","import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { api } from \"../services/api\";\n\ninterface Transaction {\n    id: number;\n    title: string;\n    amount: number;\n    type: string;\n    category: string;\n    createdAt: string;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\n\ninterface TransactionsProviderProps {\n    children: ReactNode;\n}\n\ninterface TransactionsContextData {\n    transactions: Transaction[];\n    createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n    {} as TransactionsContextData\n);\n\nexport function TransactionsProvider({ children}: TransactionsProviderProps) {\n    const [transactions, setTransactions] = useState<Transaction[]>([])\n\n    useEffect(() => {\n        api.get('/transactions')\n        .then(response => setTransactions(response.data.transactions))\n    }, []);\n\n\n    async function createTransaction(transactionInput: TransactionInput) {\n        const response = await api.post('transaction', {\n            ...transactionInput,\n            createdAt: new Date()\n        });\n        const { transaction } = response.data;\n\n        setTransactions([\n            ...transactions,\n            transaction,\n        ])\n    }\n\n    return (\n        <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n            {children}\n        </TransactionsContext.Provider>\n    )\n}\n\nexport function useTransactions() {\n    const context = useContext(TransactionsContext);\n\n    return context;\n}","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","\nimport { Container } from './styles';\nimport { useTransactions } from '../../hooks/useTransactions';\n\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport totalImg from '../../assets/total.svg';\n\n\nexport function Summary() {\n    const {transactions} = useTransactions();\n    \n    const totalDeposits = transactions.reduce((acc, transaction) => {\n        if(transaction.type === 'deposit') {\n            return acc + transaction.amount;\n        }\n\n        return acc;\n    }, 0);\n\n    const summary = transactions.reduce((acc, transaction) => {\n        if(transaction.type === 'deposit') {\n            acc.deposits+= transaction.amount;\n            acc.total+= transaction.amount;\n        } else {\n            acc.withdraws += transaction.amount;\n            acc.total -= transaction.amount;\n        }\n\n        return acc;\n    },{\n        deposits: 0,\n        withdraws: 0,\n        total: 0,\n    })\n   \n    return(\n        <Container>\n            <div>\n                <header>\n                    <p>Entradas</p>\n                    <img src={incomeImg} alt=\"\" />\n                </header>\n                <strong>\n                    {new Intl.NumberFormat('pt-BR', {style: 'currency',currency: 'BRL'})\n                    .format(summary.deposits)}\n                </strong>\n            </div>\n\n            <div>\n                <header>\n                    <p>Saídas</p>\n                    <img src={outcomeImg} alt=\"\" />\n                </header>\n                <strong>\n                    - {new Intl.NumberFormat('pt-BR', {style: 'currency',currency: 'BRL'})\n                    .format(summary.withdraws)}\n                </strong>\n            </div>\n\n            <div className=\"highlight-background\">\n                <header>\n                    <p>Total</p>\n                    <img src={totalImg} alt=\"\" />\n                </header>\n                <strong>\n                {new Intl.NumberFormat('pt-BR', {style: 'currency',currency: 'BRL'})\n                    .format(summary.total)}\n                </strong>\n            </div>\n        </Container>\n    )\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    table {\n        width: 100%;\n        border-spacing: 0 0.5rem;\n    }\n\n    th {\n        font-weight: 400;\n        color: var(--text-body);\n        text-align: left;\n        line-height: 1.5rem;\n        padding: 1rem 2rem;\n    }\n\n    td {\n        padding: 1rem 2rem;\n        background: var(--shape);\n        border: 0;\n        border-radius: 0.25rem;\n        color: var(--text-body);\n\n\n        &:first-child {\n            color: var(--text-title);\n        }\n\n        &.deposit {\n            color: var(--green);         \n        }\n\n        &.withdraw {\n            color: var(--red);         \n        }\n    }\n\n`","import { Container } from \"./styles\";\nimport { useTransactions } from \"../../hooks/useTransactions\";\n\n\nexport function TransactionTable() {\n    const {transactions} = useTransactions();\n\n    return(\n        <Container>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Título</th>\n                        <th>Valor</th>\n                        <th>Categoria</th>\n                        <th>Data</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {transactions.map(transaction => (\n                        <tr key={transaction.id}>\n                            <td>{transaction.title}</td>\n                            <td className={transaction.type}>\n                                {new Intl.NumberFormat('pt-BR', {\n                                    style: 'currency',\n                                    currency: 'BRL'\n                                }).format(transaction.amount)}\n                            </td>\n                            <td>{transaction.category}</td>\n                            <td>{new Intl.DateTimeFormat('pt-BR').format(\n                                new Date(transaction.createdAt)\n                            )}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </Container>\n    )\n}","import styled from \"styled-components\";\n\nexport const Container = styled.main`\n    max-width: 1120px;\n    margin: 0 auto;\n    padding: 2.5rem 1rem;\n\n`","import { Summary } from \"../Summary\"\nimport { TransactionTable } from \"../TransactionTable\"\nimport { Container } from \"./styles\"\n\nexport function Dashboard() {\n    return(\n        <Container>\n            <Summary/>\n            <TransactionTable/>\n        </Container>\n    )\n}","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from \"styled-components\"\n\nexport const Container = styled.form`\n\n    h2 {\n        color: var(--text-title);\n        font-size: 1.5rem;\n        margin-bottom: 2rem;\n    }\n\n    input {\n        padding: 0 1.5rem;\n        width: 100%;\n        height: 4rem;\n        border-radius: 0.25rem;\n\n        background: #e7e9ee;\n        border: 1px solid #d7d7d7;\n\n        font-weight: 400;\n        font-size: 1rem;\n\n        &::placeholder {\n            color: var(--text-body);\n        }\n\n        & + input{\n            margin-top: 1rem;\n        }\n    }\n\n    button[type=\"submit\"] {\n        width: 100%;\n        padding: 0 1.5rem;\n        height: 4rem;\n        background: var(--green);\n        color: #FFF;\n        border-radius: 0.25rem;\n        border: 0;\n        font-size: 1rem;\n        margin-top: 1.5rem;\n        font-weight: 600;\n\n        transition: filter 0.2s;\n\n        &:hover {\n            filter: brightness(0.9);\n        }\n    }\n\n`;\n\n\nexport const TransactionTypeContainer = styled.div`\n    margin: 1rem 0;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 0.5rem;\n`\n\ninterface RadioBoxProps {\n    isActive: boolean;\n    activeColor: 'green' | 'red';\n}\n\nconst colors = {\n    green: '#ECFBF5',\n    red: '#FDEEF1'\n}\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n\n    height: 4rem;\n    border: 1px solid #d7d7d7;\n    border-radius: 0.25rem;\n\n    background: ${(props) => props.isActive ? colors[props.activeColor] : 'transparent'};\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:hover {\n        border-color: rgba(176, 176, 176, 0.5);\n    }\n\n    img {\n        width: 20px;\n        height: 20px;\n    }\n\n    span {\n        display: inline-block;\n        margin-left: 1rem;\n        font-size: 1rem;\n        color: var(--text-title);\n    }\n`","import Modal from 'react-modal';\nimport { FormEvent, useState, useContext } from 'react';\nimport { useTransactions } from '../../hooks/useTransactions';\n\nimport closeImg from '../../assets/close.svg';\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\n\nimport { Container, RadioBox, TransactionTypeContainer } from './styles';\n\ninterface NewTransactionModalProps {\n    isOpen: boolean;\n    onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({isOpen, onRequestClose}: NewTransactionModalProps) {\n    const { createTransaction } = useTransactions();\n\n    const [type, setType] = useState('deposit');\n    const [title, setTitle] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [category, setCategory] = useState('');\n\n    async function handleCreateNewTransaction(event: FormEvent) {\n        event.preventDefault();\n\n        await createTransaction({\n            title,\n            amount,\n            category,\n            type\n        })\n\n        setType('deposit');\n        setTitle('');\n        setAmount(0);\n        setCategory('');\n\n        onRequestClose();\n    }\n\n    return(\n        <Modal \n          isOpen={isOpen}\n          onRequestClose={onRequestClose}\n          overlayClassName=\"react-modal-overlay\"\n          className=\"react-modal-content\"\n         >\n        <div>\n            <img src={closeImg} alt=\"Fechar\" onClick={onRequestClose} className=\"react-modal-close\"/>\n        </div>\n        <Container onSubmit={handleCreateNewTransaction}>\n          <h2>Cadastrar transação</h2>\n              <input type=\"text\" placeholder='Título' \n                value={title} \n                onChange={event => setTitle(event.target.value)}\n                />\n              <input type=\"number\" placeholder='Valor' \n                value={amount}\n                onChange={event => setAmount(Number(event.target.value))}\n                />\n              <TransactionTypeContainer>\n                <RadioBox \n                    type=\"button\"\n                    isActive={type === 'deposit'} \n                    activeColor={'green'}\n                    onClick={() => {setType('deposit')}}\n                >\n                    <img src={incomeImg} alt=\"Entrada\"/>\n                    <span>Entrada</span>\n                </RadioBox>\n                <RadioBox \n                    type=\"button\"\n                    isActive={type === 'withdraw'}\n                    activeColor={'red'}\n                    onClick={() => {setType('withdraw')}}\n                >\n                    <img src={outcomeImg} alt=\"Saída\"/>\n                    <span>Saída</span>\n                </RadioBox>\n              </TransactionTypeContainer>\n              <input type=\"text\" placeholder='Categoria' \n                value={category}\n                onChange={event => setCategory(event.target.value)}\n                />\n              <button type=\"submit\">Cadastrar</button>\n        </Container>\n        </Modal>\n    )\n}","import { GlobalStyled } from './styles/global';\nimport { Header } from './components/Header';\nimport { Dashboard } from './components/Dashboard';\nimport Modal from 'react-modal';\nimport { useState } from 'react';\nimport { NewTransactionModal } from './components/NewTransactionModal';\nimport { TransactionsProvider } from './hooks/useTransactions';\n\nexport function App() {\n  Modal.setAppElement('#root');\n\n  const [isNewTransacationModalOpen, setNewTransactionModalOpen] = useState(false);\n\n  function handleOpenNewTransactionModal() {\n      setNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n      setNewTransactionModalOpen(false);\n  }\n\n  return (\n    <TransactionsProvider>\n      <GlobalStyled/>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal}/>\n      <NewTransactionModal\n        isOpen={isNewTransacationModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n      <Dashboard/>\n    </TransactionsProvider>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createServer, Model } from 'miragejs';\nimport { App } from './App';\n\ncreateServer({\n  models: {\n    transaction: Model\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Freelance',\n          type: 'deposit',\n          category: 'Dev',\n          amount: 6000,\n          createdAt: new Date('2021-02-12 09:00:00')\n        }\n      ]\n    })\n  },\n\n  routes() {\n    this.namespace = 'api';\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction');\n    });\n\n    this.post('/transaction', (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create('transaction', data);\n    })\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}